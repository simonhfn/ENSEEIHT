module addsub32(a[31..0], b[31..0], sub : s[31..0], V, C)
	d[31..0] = /sub*b[31..0]+sub*/b[31..0];
	adder32(a[31..0], d[31..0], sub : s[31..0], e);
	c = e*/sub+/e*sub;
	V = a[31]*b[31]*/s[31]*/sub+/a[31]*/b[31]*s[31]*/sub+/a[31]*b[31]*s[31]*sub+a[31]*/b[31]*/s[31]*sub;
end module

module ucmp1(a, b : sup, eq)
	eq = a*b+/a*/b;
	sup = a*/b;
end module

module ucmp2(a[1..0], b[1..0] : sup, eq)
	ucmp1(a[1], b[1] : supi, eqi);
	ucmp1(a[0], b[0] : supj, eqj);
	eq = eqi*eqj;
	sup = supi+eqi*supj;
end module

module ucmp4(a[3..0], b[3..0] : sup, eq)
	ucmp2(a[3..2], b[3..2] : supi, eqi);
	ucmp2(a[1..0], b[1..0] : supj, eqj);
	eq = eqi*eqj;
	sup = supi+eqi*supj;
end module

module ucmp8(a[7..0], b[7..0] : sup, eq)
	ucmp4(a[7..4], b[7..4] : supi, eqi);
	ucmp4(a[3..0], b[3..0] : supj, eqj);
	eq = eqi*eqj;
	sup = supi+eqi*supj;
end module

module ucmp16(a[15..0], b[15..0] : sup, eq)
	ucmp8(a[15..8], b[15..8] : supi, eqi);
	ucmp8(a[7..0], b[7..0] : supj, eqj);
	eq = eqi*eqj;
	sup = supi+eqi*supj;
end module

module barrelshifter32(r, nb[4..0], e[31..0] : s[31..0])
	shift1(r, nb[0], e[31..0] : s1[31..0]);
	shift2(r, nb[1], s1[31..0] : s2[31..0]);
	shift4(r, nb[2], s2[31..0] : s3[31..0]);
	shift8(r, nb[3], s3[31..0] : s4[31..0]);
	shift16(r, nb[4], s4[31..0] : s[31..0]);
end module

module ual(a[31..0], b[31..0], cmd[5..0] : s[31..0], N, Z, V, C, test)
	decoder6to64(cmd[5..0] : en[63..0]);

	addsub32(a[31..0], b[31..0], cmd[2] : s1[31..0], V, C);
	s[31..0] = s1[31..0]:en[0];
	s[31..0] = s1[31..0]:en[4];

	s3[31..0] = a[31..0]*b[31..0];
	s[31..0] = s3[31..0]:en[1];

	s2[31..0] = a[31..0]+b[31..0];
	s[31..0] = s2[31..0]:en[2];

	s4[31..0] = a[31..0]*/b[31..0]+/a[31..0]*b[31..0];
	s[31..0] = s4[31..0]:en[3];


	barrelshifter32(cmd[0], b[4..0], a[31..0] : s5[31..0]);
	s[31..0] = s5[31..0]:en[13];
	s[31..0] = s5[31..0]:en[14];

	umult16x16(a[15..0], b[15..0] : s6[31..0]);
	s[31..0] = s6[31..0]:en[26];

	N = s[31];
	Z = /s[0]*/s[1]*/s[2]*/s[3]*/s[4]*/s[5]*/s[6]*/s[7]*/s[8]*/s[9]*/s[10]*/s[11]*/s[12]*/s[13]*/s[14]*/s[15]*/s[16]*/s[17]*/s[18]*/s[19]*/s[20]*/s[21]*/s[22]*/s[23]*/s[24]*/s[25]*/s[26]*/s[27]*/s[28]*/s[29]*/s[30]*/s[31];

	test = en[2];
end module

module ouex3(e1, e2, e3 : s)
	s = e1*/e2*/e3+/e1*e2*/e3+/e1*/e2*e3+e1*e2*e3;
end module

module bits_ctrl(d4,d3,d2,d1 : c3,c2,c1)
	ouex3(d4, d2, d1 : c1);
	ouex3(d4, d3, d1 : c2);
	ouex3(d4, d3, d2 : c3);
end module

// Test de l'emetteur/recepteur de Haming
module test(e[3..0], se[6..0] : c[3..0], err)
	emetteur(e[3], e[2], e[1], e[0] : de[6], de[5], de[4], de[3], de[2], de[1], de[0]);
	s[6..0] = de[6..0]*/se[6..0]+/de[6..0]*se[6..0];
	recepteur(s[6], s[5], s[4], s[3], s[2], s[1], s[0] : err, c[3], c[2], c[1], c[0]);
end module