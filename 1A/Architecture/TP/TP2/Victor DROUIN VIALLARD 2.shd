module clock28(rst, clk : s[27..0])
	clock4(rst, clk, s[3..0]);
	n3 = /s[3];
	clock4(rst, n3, s[7..4]);
	n7 = /s[7];
	clock4(rst, n7, s[11..8]);
	n11 = /s[11];
	clock4(rst, n11, s[15..12]);
	n15 = /s[15];
	clock4(rst, n15, s[19..16]);
	n19 = /s[19];
	clock4(rst, n19, s[23..20]);
	n23 = /s[23];
	clock4(rst, n23, s[27..24]);
end module

module affmux(rst, clk, data[15..0] : anodes[3..0], seg[6..0])
	count2(rst, clk, 1 : si[1..0]);
	decoder2to4(si[1..0] : anodes[3..0]);
	tmp[3..0] = anodes[3]*data[15..12]+anodes[2]*data[11..8]+anodes[1]*data[7..4]+anodes[0]*data[3..0];
	dec7segsH(tmp[3..0] : seg[6..0]);
end module

module test_affmux(mclk, data[15..0] : ssg[6..0], an[3..0])
	clock28(0, mclk : si[27..0]);
	ld[7..0] = si[27..20];
	an[3..0] = /a[3..0];
	ssg[6..0] = /seg[6..0];
	affmux(0, si[7], data[15..0] : a[3..0], seg[6..0]);
end module

module fifo16x8(rst, clk, put, get,din[7..0],dout[7..0],empty, full)
	rams_dual_asyn_read16x8(clk, incWrAddr, wrAddr[3..0], rdAddr[3..0], din[7..0], doutWr[7..0], dout[7..0]);
	incWrAddr = put*/full;
	incRdAddr = get*/empty;
	count4(rst, clk, incWrAddr : wrAddr[3..0]);
	count4(rst, clk, incRdAddr : rdAddr[3..0]);
	
	lastFull(wrAddr[3..0], rdAddr[3..0] : lFull);
	lastEmpty(wrAddr[3..0], rdAddr[3..0] : lEmpty);
	tFull = put*lFull*/get+full*/get;
	tEmpty = get*lEmpty*/put+empty*/put;
	
	full := tFull;
	full.clk = clk;
	full.rst = rst;
	nempty := /tEmpty;
	nempty.clk = clk;
	nempty.rst = rst;
	empty = /nempty;
end module