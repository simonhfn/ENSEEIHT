module count0to39(rst, clk, en : s[5..0])
	n39 = /s[5]+s[4]+s[3]+/s[2]+/s[1]+/s[0];
	t[0] = n39+/n39*s[0];
	t[1] = s[0]*n39+/n39*s[1];
	t[2] = s[1]*s[0]*n39+/n39*s[2];
	t[3] = s[2]*s[1]*s[0]*n39+/n39*s[3];
	t[4] = s[3]*s[2]*s[1]*s[0]*n39+/n39*s[4];
	t[5] = s[4]*s[3]*s[2]*s[1]*s[0]*n39+/n39*s[5];
	
	s[5..0] := /t[5..0]*s[5..0]+t[5..0]*/s[5..0];
	s[5..0].clk = clk;
	s[5..0].rst = rst;
	s[5..0].ena = en;
end module

module uart_em(rst, clk, data[7..0], send : sent, sout)
	// On n'incrémente le compteur que si il n'est pas à 0 ou que send est activé
	en = /dBit[0]+send;
	count0to9(rst, clk, en : bit[3..0]);
	
	tSend = send*dBit[0];
	tData[7..0] := data[7..0];
	tData[7..0].clk = clk;
	tData[7..0].ena = tSend;
	tData[7..0].rst = rst;
	
	// On décode le compteur
	decoder4to16(bit[3..0] : dBit[15..0]);
	
	// On détermine la donnée à envoyer
	sout =  dBit[2]*tData[0]+dBit[3]*tData[1]+dBit[4]*tData[2]+dBit[5]*tData[3]+dBit[6]*tData[4]+dBit[7]*tData[5]+dBit[8]*tData[6]+dBit[9]*tData[7]+dBit[0];
	
	// On dit que c'est fini d'envoyer si le bit envoyé est le 9
	sent = dBit[9];
end module

module uart_rec(rst, clk, sin : dout[7..0], rcvd)
	// On n'incrémente le compteur que si sin ne vaut pas 1 ou qu'il n'était pas à 0
	en = /dBit[0]+/sin;
	count0to39(rst, clk, en : bit[5..0]);
	
	// On décode le compteur
	decoder6to64(bit[5..0] : dBit[63..0]);
	
	dout[6..0] := dout[7..1];
	dout[7] := sin;
	ena = dBit[2]+dBit[6]+dBit[10]+dBit[14]+dBit[18]+dBit[22]+dBit[26]+dBit[30]+dBit[34];
	dout[6..0].clk = clk;
	dout[6..0].ena = ena;
	dout[6..0].rst = rst;
	dout[7].clk = clk;
	dout[7].rst = rst;
	dout[7].ena = ena;
	
	rcvd = dBit[36]+dBit[37]+dBit[38]+dBit[39];
	
end module

module test_uart(mclk, sw[7..0], btn[0], jc_in[0] : ja_out[0], an[3..0], ssg[6..0], ld[7..0])
	clock28(0, mclk : clk[27..0]);
	uart_em(0, clk[22], sw[7..0], btn[0] : ld[1], ja_out[0]);
	uart_rec(0, clk[20], jc_in[0] : dout[7..0], ld[0]);
	data[15..8] = sw[7..0];
	data[7..0] = dout[7..0];
	ld[7..2] = 0;
	affmux(0, clk[16], data[15..0] : nan[3..0], nseg[6..0]);
	an[3..0] = /nan[3..0];
	ssg[6..0] = /nseg[6..0];
end module