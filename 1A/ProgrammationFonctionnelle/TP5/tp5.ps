%!PS-Adobe-3.0
%%Title: tp5.ml
%%For: 'Drouin viallard Victor'
%%Creator: a2ps version 4.14
%%CreationDate: Tue Oct  7 19:13:29 2014
%%BoundingBox: 24 50 571 792
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 2
%%PageOrder: Ascend
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%Requirements: Tumble Duplex 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 595 def
/sw 842 def
/llx 50 def
/urx 792 def
/ury 571 def
/lly 24 def
/#copies 1 def
%% Pagedevice definitions:
countdictstack
% Push our own mark, since there can be several PS marks pushed depending
% where the failure really occured.
/a2ps_mark
{
%%BeginFeature: *Tumble False
  (<<) cvx exec /Tumble (false) cvx exec (>>) cvx exec setpagedevice
%%EndFeature
%%BeginFeature: *Duplex True
  (<<) cvx exec /Duplex (true) cvx exec (>>) cvx exec setpagedevice
%%EndFeature
} stopped
% My cleartomark
{ /a2ps_mark eq { exit } if } loop
countdictstack exch sub dup 0 gt
{
  { end } repeat
}{
  pop
} ifelse
/th 15.000000 def
/fnfs 11 def
/bfs 7.473382 def
/cw 4.484029 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   505.947993 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.138821 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(\(* Utils *\)) c n
(let) K
( rev l = ) p
(let) K
( ) p
(rec) K
( aux m = ) p
(function) K
( | [] -> m | h::t  -> aux \(h::m\) t ) p
(in) K
( aux []) p n
( l;;) N
(let) K
( ) p
(rec) K
( length = ) p
(function) K
( | [] -> 0 | h::t -> 1+\(length t\);;) p n
() N
(\(* Exercice 1 *\)) c n
(let) K
( pol1 = [3.0;2.0;4.0] ) p
(and) K
( pol2 = [-40.0;2.0;21.0;2.0] ) p
(and) K
( pol3 = [3.5;4.0];;) p n
() N
(\(* Exercice 2 *\)) c n
(\(* parametres : P : 'a-list *\)) N
(\(* preconditions : / *\)) N
(\(* type : 'a list -> int *\)) N
(let) K
( ) p
(rec) K
( degree = ) p
(function) K n
() p 8 T (| [] -> -1) N
() S 8 T (| [h] -> ) S
(if) K
( h = 0. ) p
(then) K
( -1 ) p
(else) K
( 0) p n
() S 8 T (| 0.::t -> ) S
(let) K
( d = degree t ) p
(in) K
( ) p
(if) K
( d = 0 ) p
(then) K
( -1 ) p
(else) K
( 1+d) p n
() S 8 T (| _::t -> 1+\(degree t\);;) N
() S 8 T () N
(\(* tests :) c n
() S 8 T (degree pol1 -> 2) N
() S 8 T (degree pol2 -> 3) N
() S 8 T (degree pol3 -> 1) N
() S 8 T (degree [] -> -1) N
() S 8 T (degree [4.0] -> 0) S 32 T (*\)) N
(degree pol1;;) p n
(degree pol2;;) N
(degree pol3;;) N
(degree [];;) N
(degree [4.0];;) N
(degree [0.];;) N
() N
(\(* Exercice 3 *\)) c n
(\(* parametres : P : 'a-list, i : int *\)) N
(\(* preconditions : i est positif pour que \347a ait un sens *\)) N
(\(* type : int -> 'a list -> 'a *\)) N
(let) K
( ) p
(rec) K
( coeff i = ) p
(function) K n
() p 8 T (| [] -> 0.) N
() S 8 T (| h::q -> ) S
(if) K
( i = 0 ) p
(then) K
( h ) p
(else) K
( coeff \(i-1\) q;;) p n
(\(* tests :) c n
() S 8 T (coeff 1 pol1 -> 2.0) N
() S 8 T (coeff 3 pol2 -> 2.0) N
() S 8 T (coeff 0 pol3 -> 3.5) N
() S 8 T (coeff 1 [] -> 0) N
() S 8 T (coeff 0 [4.0] -> 4.0) S 32 T (*\)) N
(coeff 1 pol1;;) p n
(coeff 3 pol2;;) N
(coeff 0 pol3;;) N
(coeff 1 [];;) N
(coeff 0 [4.0];;) N
() N
(\(* Exercice 4 *\)) c n
(\(* parametres : n : int *\)) N
(\(* preconditions : n est positif *\)) N
(\(* type : int -> 'a list *\)) N
(let) K
( monome n =) p n
() S 8 T () S
(let) K
( ) p
(rec) K
( aux p = ) p
(function) K n
() p 8 T () S 16 T (| 0 -> p) N
() S 8 T () S 16 T (| k -> aux \(0.::p\) \(k-1\)) N
() S 8 T () S
(in) K
( aux [1.] n;;) p n
(\(* tests :) c n
() S 8 T (monome 4 -> [0.;0.;0.;0.;1.]) N
() S 8 T (monome 0 -> [1.]) S 32 T (*\)) N
(monome 4;;) p n
(monome 0;;) N
() N
(\(* Exercice 5 *\)) c n
(\(* parametres : P : 'a-list, x : float *\)) N
(tp5.ml) (Page 1/4) (Oct 07, 14 19:13) title
border
/v 1 store
/x0 x v get 3.138821 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(\(* preconditions : / *\)) c n
(\(* type : ffloat -> loat list -> float *\)) N
(let) K
( ) p
(rec) K
( evaluate x = ) p
(function) K n
() p 8 T (| [] -> 0.) N
() S 8 T (| h::t -> h+.x*.\(evaluate x t\);;) N
(\(* tests :) c n
() S 8 T (evaluate 1 pol2 -> -15.) N
() S 8 T (evaluate 2 pol1 -> 23.) N
() S 8 T (evaluate 4 [] -> 0.) N
() S 8 T (evaluate 7 [4.] -> 4.) S 32 T (*\)) N
(evaluate 1. pol2;;) p n
(evaluate 2. pol1;;) N
(evaluate 4. [];;) N
(evaluate 7. [4.];;) N
() N
(\(* Exercice 6 *\)) c n
(\(* parametres : P : 'a-list, m : int *\)) N
(\(* preconditions : m est sup\351rieur au degr\351 de P *\)) N
(\(* type 'a list -> int -> 'a list *\)) N
(let) K
( extend p m =) p n
() S 8 T () S
(let) K
( ) p
(rec) K
( aux k =) p n
() S 8 T () S 16 T () S
(if) K
( k <= 0 ) p
(then) K
( [] ) p
(else) K
( 0.::\(aux \(k-1\)\)) p n
() S 8 T () S
(in) K
( p@\(aux \(m - \(degree p\)\)\);;) p n
(\(* tests :) c n
() S 8 T (extend pol1 4 -> [3.0;2.0;4.0;0.;0.] *\)) N
(extend pol1 4;;) p n
() N
(\(* Exercice 7 *\)) c n
(\(* parametres : P : 'a-list *\)) N
(\(* preconditions : / *\)) N
(\(* type 'a list -> 'a list *\)) N
(let) K
( ) p
(rec) K
( retract = ) p
(function) K n
() p 8 T (| [] -> []) N
() S 8 T (| [0.] -> []) N
() S 8 T (| [h] -> [h]) N
() S 8 T (| h::t -> ) S
(let) K
( r = retract t ) p
(in) K n
() p 8 T () S 16 T () S
(if) K
( r = [] && h = 0. ) p
(then) K
( [] ) p
(else) K
( h::r;;) p n
(\(* tests :) c n
() S 8 T (retract extend pol1 4 -> [3.;2.;4.]) S 48 T (*\)) N
(retract \(extend pol1 4\);;) p n
() N
(\(* Exercice 8 *\)) c n
(\(* parametres : f : 'a -> 'b, P : 'a-list *\)) N
(\(* preconditions : / *\)) N
(\(* type : 'a -> 'b -> 'a list -> 'b list *\)) N
(let) K
( ) p
(rec) K
( map f = ) p
(function) K n
() p 8 T (| [] -> []) N
() S 8 T (| h::t -> \(f h\)::\(map f t\);;) N
(\(* tests : d\351j\340 fait dans l'autre TP *\)) c n
() p n
(\(* parametres : f : 'a -> 'b -> 'c, P : 'a-list, Q : 'a-list *\)) c n
(\(* preconditions : p et q sont de m\352me taille *\)) N
(\(* type : \('a -> 'b -> 'c\) -> 'a list -> 'b list -> 'c list *\)) N
(let) K
( ) p
(rec) K
( map2 f p = ) p
(function) K n
() p 8 T (| [] -> []) N
() S 8 T (| h::t -> ) S
(match) K
( p ) p
(with) K n
() p 8 T () S 16 T (| [] -> \(f 0. h\)::\(map2 f [] t\)) N
() S 8 T () S 16 T (| hq::tq -> \(f hq h\)::\(map2 f tq t\);;) N
() N
(\(* Exercice 9 *\)) c n
(\(* parametres : P : 'a-list, a : float *\)) N
(\(* preconditions : / *\)) N
(\(* type : float -> float list -> float list *\)) N
(let) K
( ) p
(rec) K
( scal_mult a p = retract \(map \() p
(fun) K
( x -> a*.x\) p\);;) p n
(\(* tests :) c n
() S 8 T (scal_mult 5. pol3 -> [17.5;20.] *\)) N
(scal_mult 5. pol3;;) p n
(tp5.ml) (Page 2/4) (Oct 07, 14 19:13) title
border
grestore
(Printed by 'Drouin viallard Victor') rhead
() (1/2) (Tuesday October 07, 2014) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.138821 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(scal_mult 0. pol2;;) p n
() N
(\(* Exercice 10 *\)) c n
() p n
(\(* parametres : P : 'a-list, Q : 'a-list *\)) c n
(\(* preconditions : / *\)) N
(\(* type : float list -> float list -> float list *\)) N
(let) K
( plus p q =) p n
() S 8 T () S
(let) K
( d = max \(degree p\) \(degree q\)) p n
() S 8 T () S
(in) K n
() p 8 T () S 16 T (retract \(map2 \() S
(fun) K
( x y -> x+.y\) \(extend p d\) \(extend q d\)\);;) p n
(\(* tests :) c n
() S 8 T (plus pol1 pol3 -> [6.5;6.;4.]) S 40 T (*\)) N
(plus pol1 pol3;;) p n
(plus pol2 pol3;;) N
() N
(\(* parametres : P : 'a-list, Q : 'a-list *\)) c n
(\(* preconditions : / *\)) N
(\(* type : float list -> float list -> float list *\)) N
(let) K
( minus p q =) p n
() S 8 T () S
(let) K
( d = \(max \(degree p\) \(degree q\)\)) p n
() S 8 T () S
(in) K n
() p 8 T () S 16 T (retract \(map2 \() S
(fun) K
( x y -> x-.y\) \(extend p d\) \(extend q d\)\);;) p n
(\(* tests :) c n
() S 8 T (minus pol3 [0.5;4.] -> [3.]) S 40 T (*\)) N
(minus pol3 [0.5;4.];;) p n
() N
(\(* Exercice 11 *\)) c n
(\(* parametres : P : 'a-list, Q : 'a-list *\)) N
(\(* preconditions : / *\)) N
(\(* type : float list -> float list -> float list *\)) N
(let) K
( ) p
(rec) K
( mult p = ) p
(function) K n
() p 8 T (| [] -> []) N
() S 8 T (| h::t -> plus \(scal_mult h p\) \(0.::\(mult p t\)\);;) N
(\(* tests :) c n
() S 8 T (mult pol1 pol3 -> [10.5;19.;22.;16.]) S 48 T (*\)) N
(mult pol1 pol2;;) p n
() N
(\(* Exercice 12 *\)) c n
(\(* parametres : P : 'a-list *\)) N
(\(* preconditions : / *\)) N
(\(* type : float list -> float list *\)) N
(let) K
( derive = ) p
(function) K n
() p 8 T (| [] -> []) N
() S 8 T (| h::t ->) N
() S 8 T () S 16 T () S
(let) K
( ) p
(rec) K
( aux k = ) p
(function) K n
() p 8 T () S 16 T () S 24 T (| [] -> []) N
() S 8 T () S 16 T () S 24 T (| h::t -> \(k*.h\)::\(aux \(k+.1.\) t\)) N
() S 8 T () S 16 T () S
(in) K
( aux 1. t;;) p n
(\(* tests :) c n
() S 8 T (derive pol1 -> [2.;8.]) S 32 T (*\)) N
(derive pol1;;) p n
() N
(\(* Exercice 13 *\)) c n
(let) K
( ) p
(rec) K
( mon_mult p = ) p
(function) K n
() p 8 T (| 0 -> p) N
() S 8 T (| n -> mon_mult \(0.::p\) \(n-1\);;) N
() N
(\(* parametres : P : 'a-list, Q : 'a-list *\)) c n
(\(* preconditions : Q divise P *\)) N
(\(* type : float list -> float list -> float list *\)) N
(let) K
( ) p
(rec) K
( divise p q =) p n
() S 8 T () S
(let) K
( ) p
(rec) K
( aux p q m0 =) p n
() S 8 T () S 16 T () S
(let) K
( p = retract p ) p
(in) K n
() p 8 T () S 16 T () S
(let) K
( n = degree p ) p
(in) K n
() p 8 T () S 16 T () S
(let) K
( m = degree q ) p
(in) K n
() p 8 T () S 16 T () S
(if) K
( n = -1 ) p
(then) K
( extend [] \(m0-1\)) p n
(tp5.ml) (Page 3/4) (Oct 07, 14 19:13) title
border
/v 1 store
/x0 x v get 3.138821 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S
(else) K n
() p 8 T () S 16 T () S 24 T () S
(let) K
( c = \(coeff n p\)/.\(coeff m q\) ) p
(in) K n
() p 8 T () S 16 T () S 24 T () S
(let) K
( r = scal_mult c \(mon_mult q \(n-m\)\) ) p
(in) K n
() p 8 T () S 16 T () S 24 T () S 32 T (extend \(\(aux \(minus p r\) q \(n-m\)\)@[c]\) \(m0-1\)) N
() S 8 T () S
(in) K
( aux p q \(degree p - degree q\);;) p n
(\(* tests :) c n
() S 8 T (pol3 = divise \(mult pol1 pol3\) pol1 -> true) S 56 T (*\)) N
(pol3 = divise \(mult pol1 pol3\) pol1;;) p n
(pol2 = divise \(mult pol1 pol2\) pol1;;) N
(pol1 = divise \(mult pol3 pol1\) pol3;;) N
(divise [1.;2.;1.] [1.;1.];;) N
() N
(\(* TP PARFAIT ! <3 *\)) c n
() p n
() N
() N
() N
(tp5.ml) (Page 4/4) (Oct 07, 14 19:13) title
border
grestore
(Printed by 'Drouin viallard Victor') rhead
() (2/2) (Tuesday October 07, 2014) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
