#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include "liste.h"

/* Processus (pid + state) */
struct Process {
	int pid;
	State state;
};

/* Liste de processus */
struct CaseProcess {
	Process *process;
	ListeProcess next;
};

/* Détermine si le processus d'identifiant pid appartient à la liste list */
int belong(int pid, ListProcess list) {
	
	ListProcess* p_list = &list;
	
	while(*p_list != NULL && *p_list->process->pid != pid) {
		p_list = p_list->next;
	}
	
	if(*p_list == NULL) {
		return 0;
	}
	else {
		return 1;
	}
}

/* Ajoute le processus d'identifiant pid et d'état state à la liste *p_list */
void add(int pid, State state, ListProcess* p_list) {
	
	ListeProcess list;
	
	/* Création du processus à insérer */
	Process process = (Process)malloc(sizeof(struct Process));
	process->pid = pid;
	process->state = state;
	
	/* Création de la case de liste à insérer */
	ProcessList processCase = (ListProcess)malloc(sizeof(struct ListProcess));
	
	/* Si la liste n'existe pas s'arrêter */
	if(p_list == NULL) {
		exit(1);
	}
	
	/* Si la liste est vide insérer le processus en tête */
	if(*p_list == NULL) {
		p_list->process = process;
	}
	else {
		list = *p_list;
		
		while(list->next != NULL) {
			list = list->next;
		}
		
		list->next = &processCase;
	}
}

void changeState(int pid, State state, ListProcess list) {
	
	ListProcess* p_list = &list;
	
	while(*p_list != NULL && *p_list->process->pid != pid) {
		p_list = p_list->next;
	}
	
	if(*p_list == NULL) {
		p_list->process->state = state;
	}
}

void display(ListProcess list) {
	
	Process process;
	ProcessList list_c = list;
	
	printf("Process :\n");
	printf("----------------\n");
	
	while(*list_c != NULL) {
		printf("Process n°%d - ", list_c->process->pid);
		if(list_c->process->state == READY) {
			printf("READY");
		}
		else if(list_c->process->state == SUSPENDED) {
			printf("SUSPENDED");
		}
		else if(list_c->process->state == MISSING) {
			printf("MISSING");
		}
		printf("\n");
	}
}

int remove(int pid, ListProcess* p_list) {
	
	ListProcess list;
	ListProcess next;
	
	/* Si la liste n'existe pas terminer */
	if(p_list == NULL) {
		exit(1);
	}
	
	list = *p_list;
	
	/* Si la liste est vide */
	if(list == NULL) {
		*p_list = NULL;
		free(list);
	}
	/* Si la liste n'est pas vide */
	else {
		while(list->next != NULL && list->next->process->pid != pid) {
			list = list->next;
		}
		
		if(list->next != NULL) {
			next = list->next->next;
			free(list->next);
			list->next = next;
		}
	}
}







