//liste.h : définition abstraite des types et prototypes

#ifndef _LISTE		//Pour éviter les définitions multiples

  #define _LISTE

  typedef struct chainon *Liste;

  typedef enum {INEXISTANT, ACTIF, SUSPENDU} ETAT_PROC;


#endif

/* Lit le numero du porcessus en tete de la liste l 
renvoie le numero lu ou 0 si liste vide */

int lire_num_tete(Liste l);

/* ret = rechercher(numproc, l)
   renvoie 0 si numproc n'appartient pas a la liste l,
   quelque chose de different sinon */

int rechercher(int x, Liste l);

/* ret = modifier(numproc, etat, l)
   modifie l'etat de numproc s'il appartient a la liste
   renvoie 0 si numproc n'est pas dans la liste */

int modifier(int x, ETAT_PROC etat,Liste l);

/* afficher(l1, mess) affiche les elements de l 
mess est un tableau de pointeurs sur les chaines correspondant aux etats. si mess==NULL, c'est le code de l'etat qui est affiche*/

void afficher(Liste l, char **mess);

/* inserer_en_fin(numproc, etat, argv_cmd, l) 
- cree un nouvel enregistrement, et l'initalise avec numproc, etat, et argv_cmd
- puis l'insere en fin de liste
- renvoie 0 si echec */

int inserer_en_fin(int numproc, ETAT_PROC etat, char **seq, Liste *l);

/* supprimer(numproc, l1)
- supprime le processus numproc de la liste l1
- renvoie 0 si numproc n'appartient pas a la liste*/
int supprimer_proc(int x, Liste *l);

/* detruire(l1) détruit la liste l1 */
void detruire(Liste *l);

