========== TP3_3 ==========

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
	int pid;
	int status;
	
	/* S'arreter si un seul paramètre est fourni */
	if(argc == 1) {
		exit(1);
	}
	
	/* Création du processus fils pour l'execution du programme en paramètres */
	pid = fork();
	
	/* Traitement du processus fils */
	if(pid == 0) {
		execvp(argv[1], &argv[1]);
	}
	/* Traitement du processus père */
	else {
		waitpid(pid, &status, WUNTRACED | WCONTINUED);
		
		if(WIFEXITED(status)) {
			printf("Le processus fils s'est terminé correctement avec le status %d.\n", WEXITSTATUS(status));
		}
		else if(WIFSIGNALED(status)) {
			printf("Le processus fils s'est terminé à cause d'un signal de numéro %d.\n", WTERMSIG(status));
		}
		else if(WIFSTOPPED(status)) {
			printf("Le processus fils a été stoppé avec le signal de numéro %d.\n", WSTOPSIG(status));
		}
		else if(WIFCONTINUED(status)) {
			printf("Le processus fils a repris.\n");
		}
	}
	
	return 0;
}

========== TP3_4 ==========

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(int argc, char *argv[]) {
	
	/* S'arreter si un seul paramètre est fourni */
	if(argc == 1) {
		printf("J'ai besoin d'arguments pour fonctionner.\n");
		pause();
	}
	else if(argc == 2) {
		printf("Je vais m'arrêter %d secondes.\n", atoi(argv[1]));
		sleep(atoi(argv[1]));
		printf("Voilà ! J'ai bien dormi.\n");
	}
	else {
		printf("Je vais m'arrêter %d secondes.\n", atoi(argv[1]));
		sleep(atoi(argv[1]));
		printf("Voilà ! J'ai bien dormi. Maintenant je m'arrête avec le status %d.\n", atoi(argv[2]));
		exit(atoi(argv[2]));
	}
	return 0;
}

========== TP3_5 ==========
