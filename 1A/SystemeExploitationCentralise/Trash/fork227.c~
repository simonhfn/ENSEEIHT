#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

int main(void) {
	int pid;
	int status;
	
	/* Création du processus fils */
	pid = fork();
	
	/* Dans le processus fils faire... */
	if(pid == 0) {
		/* Imprimer les valeurs de retour de fork, getpid, getppid */
		printf("Fork : 0; Getpid : %d; Getppid : %d", getpid(), getppid());
		/* Bloquer 4 secondes le processus */
		sleep(4);
		/* Terminer par exit(2) */
		exit(2);
	}
	/* Fans le processus père faire... */
	else {
		/* Imprimer les valeurs de retour de fork, getpid, getppid */
		printf("Fork : %d; Getpid : %d; Getppid : %d", pid, getpid(), getppid());
		/* Attendre le retour du fils */
		pid = wait(&status);
		/* Imprimer le code de retour du fils (2 attendu) */
	}
	
	
	
	
	
	
	
	
	int pid;
	int k;
	int status;
	
	/* Création des processus fils */
	for(k = 0; k < 7; k++) {
		pid = fork();
		/* Si je suis un processus fils je sors de la boucle pour ne pas moi même créer de fils */
		if(pid == 0) {
			break;
		}
	}
	/* Les 7 processus fils du processus principal ont été créés */
	
	/* Si je suis un processus fils j'affiche mon identité, je m'endors un instant, puis je retourne mon numéro (k) comme status */
	if(pid == 0) {
		printf("Je suis %d (k=%d) de père %d\n", getpid(), k, getppid());
		sleep(1*k);
		exit(k);
	}
	/* Si je suis le processus père j'attend chacune des terminaisons de mes fils et j'affiche leurs id et status */
	else {
		/* Tant qu'il y a des fils non terminés */
		while(k > 0) {
			pid = wait(&status);
			printf("Fils %d terminé avec status %d\n", pid, WEXITSTATUS(status));
			k--;
		}
	}
	return 0;
}

