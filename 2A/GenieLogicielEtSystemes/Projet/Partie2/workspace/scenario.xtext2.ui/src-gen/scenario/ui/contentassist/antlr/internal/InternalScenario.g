/*
 * generated by Xtext
 */
grammar InternalScenario;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package scenario.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package scenario.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import scenario.services.ScenarioGrammarAccess;

}

@parser::members {
 
 	private ScenarioGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ScenarioGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleScenario
entryRuleScenario 
:
{ before(grammarAccess.getScenarioRule()); }
	 ruleScenario
{ after(grammarAccess.getScenarioRule()); } 
	 EOF 
;

// Rule Scenario
ruleScenario
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScenarioAccess().getGroup()); }
(rule__Scenario__Group__0)
{ after(grammarAccess.getScenarioAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComponent
entryRuleComponent 
:
{ before(grammarAccess.getComponentRule()); }
	 ruleComponent
{ after(grammarAccess.getComponentRule()); } 
	 EOF 
;

// Rule Component
ruleComponent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComponentAccess().getAlternatives()); }
(rule__Component__Alternatives)
{ after(grammarAccess.getComponentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSchedule
entryRuleSchedule 
:
{ before(grammarAccess.getScheduleRule()); }
	 ruleSchedule
{ after(grammarAccess.getScheduleRule()); } 
	 EOF 
;

// Rule Schedule
ruleSchedule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScheduleAccess().getGroup()); }
(rule__Schedule__Group__0)
{ after(grammarAccess.getScheduleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleActivity
entryRuleActivity 
:
{ before(grammarAccess.getActivityRule()); }
	 ruleActivity
{ after(grammarAccess.getActivityRule()); } 
	 EOF 
;

// Rule Activity
ruleActivity
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getActivityAccess().getGroup()); }
(rule__Activity__Group__0)
{ after(grammarAccess.getActivityAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDivergence
entryRuleDivergence 
:
{ before(grammarAccess.getDivergenceRule()); }
	 ruleDivergence
{ after(grammarAccess.getDivergenceRule()); } 
	 EOF 
;

// Rule Divergence
ruleDivergence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDivergenceAccess().getGroup()); }
(rule__Divergence__Group__0)
{ after(grammarAccess.getDivergenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule DivergenceType
ruleDivergenceType
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceTypeAccess().getAlternatives()); }
(rule__DivergenceType__Alternatives)
{ after(grammarAccess.getDivergenceTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Component__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComponentAccess().getActivityParserRuleCall_0()); }
	ruleActivity
{ after(grammarAccess.getComponentAccess().getActivityParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getComponentAccess().getDivergenceParserRuleCall_1()); }
	ruleDivergence
{ after(grammarAccess.getComponentAccess().getDivergenceParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DivergenceType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceTypeAccess().getChoiceEnumLiteralDeclaration_0()); }
(	'Choice' 
)
{ after(grammarAccess.getDivergenceTypeAccess().getChoiceEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getDivergenceTypeAccess().getParallelEnumLiteralDeclaration_1()); }
(	'Parallel' 
)
{ after(grammarAccess.getDivergenceTypeAccess().getParallelEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Scenario__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__0__Impl
	rule__Scenario__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getScenarioKeyword_0()); }

	'Scenario' 

{ after(grammarAccess.getScenarioAccess().getScenarioKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__1__Impl
	rule__Scenario__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
(rule__Scenario__NameAssignment_1)
{ after(grammarAccess.getScenarioAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Scenario__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Scenario__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getScheduleAssignment_2()); }
(rule__Scenario__ScheduleAssignment_2)
{ after(grammarAccess.getScenarioAccess().getScheduleAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Schedule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schedule__Group__0__Impl
	rule__Schedule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getScheduleAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schedule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schedule__Group__1__Impl
	rule__Schedule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getScheduleAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schedule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schedule__Group__2__Impl
	rule__Schedule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getComponentsAssignment_2()); }
(rule__Schedule__ComponentsAssignment_2)
{ after(grammarAccess.getScheduleAccess().getComponentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schedule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schedule__Group__3__Impl
	rule__Schedule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getGroup_3()); }
(rule__Schedule__Group_3__0)*
{ after(grammarAccess.getScheduleAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schedule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schedule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getRightSquareBracketKeyword_4()); }

	']' 

{ after(grammarAccess.getScheduleAccess().getRightSquareBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Schedule__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schedule__Group_3__0__Impl
	rule__Schedule__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getHyphenMinusKeyword_3_0()); }

	'-' 

{ after(grammarAccess.getScheduleAccess().getHyphenMinusKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Schedule__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Schedule__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getComponentsAssignment_3_1()); }
(rule__Schedule__ComponentsAssignment_3_1)
{ after(grammarAccess.getScheduleAccess().getComponentsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Activity__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Activity__Group__0__Impl
	rule__Activity__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Activity__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityAccess().getActivityAction_0()); }
(

)
{ after(grammarAccess.getActivityAccess().getActivityAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Activity__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Activity__Group__1__Impl
	rule__Activity__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Activity__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityAccess().getActKeyword_1()); }

	'Act' 

{ after(grammarAccess.getActivityAccess().getActKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Activity__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Activity__Group__2__Impl
	rule__Activity__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Activity__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityAccess().getNameAssignment_2()); }
(rule__Activity__NameAssignment_2)
{ after(grammarAccess.getActivityAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Activity__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Activity__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Activity__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityAccess().getScheduleAssignment_3()); }
(rule__Activity__ScheduleAssignment_3)?
{ after(grammarAccess.getActivityAccess().getScheduleAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Divergence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group__0__Impl
	rule__Divergence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getDivKeyword_0()); }

	'Div' 

{ after(grammarAccess.getDivergenceAccess().getDivKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Divergence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group__1__Impl
	rule__Divergence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getTypeAssignment_1()); }
(rule__Divergence__TypeAssignment_1)
{ after(grammarAccess.getDivergenceAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Divergence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group__2__Impl
	rule__Divergence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getDivergenceAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Divergence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group__3__Impl
	rule__Divergence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getSchedulesAssignment_3()); }
(rule__Divergence__SchedulesAssignment_3)
{ after(grammarAccess.getDivergenceAccess().getSchedulesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Divergence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group__4__Impl
	rule__Divergence__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getGroup_4()); }
(rule__Divergence__Group_4__0)*
{ after(grammarAccess.getDivergenceAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Divergence__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getRightSquareBracketKeyword_5()); }

	']' 

{ after(grammarAccess.getDivergenceAccess().getRightSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Divergence__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group_4__0__Impl
	rule__Divergence__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getDivergenceAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Divergence__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Divergence__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getSchedulesAssignment_4_1()); }
(rule__Divergence__SchedulesAssignment_4_1)
{ after(grammarAccess.getDivergenceAccess().getSchedulesAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Scenario__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getNameEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getScenarioAccess().getNameEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Scenario__ScheduleAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScenarioAccess().getScheduleScheduleParserRuleCall_2_0()); }
	ruleSchedule{ after(grammarAccess.getScenarioAccess().getScheduleScheduleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__ComponentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getComponentsComponentParserRuleCall_2_0()); }
	ruleComponent{ after(grammarAccess.getScheduleAccess().getComponentsComponentParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__ComponentsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScheduleAccess().getComponentsComponentParserRuleCall_3_1_0()); }
	ruleComponent{ after(grammarAccess.getScheduleAccess().getComponentsComponentParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Activity__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityAccess().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getActivityAccess().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Activity__ScheduleAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActivityAccess().getScheduleScheduleParserRuleCall_3_0()); }
	ruleSchedule{ after(grammarAccess.getActivityAccess().getScheduleScheduleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getTypeDivergenceTypeEnumRuleCall_1_0()); }
	ruleDivergenceType{ after(grammarAccess.getDivergenceAccess().getTypeDivergenceTypeEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__SchedulesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getSchedulesScheduleParserRuleCall_3_0()); }
	ruleSchedule{ after(grammarAccess.getDivergenceAccess().getSchedulesScheduleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Divergence__SchedulesAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDivergenceAccess().getSchedulesScheduleParserRuleCall_4_1_0()); }
	ruleSchedule{ after(grammarAccess.getDivergenceAccess().getSchedulesScheduleParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


