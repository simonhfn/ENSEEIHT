/*
 * generated by Xtext
 */
grammar InternalScenario;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package scenario.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package scenario.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import scenario.services.ScenarioGrammarAccess;

}

@parser::members {

 	private ScenarioGrammarAccess grammarAccess;
 	
    public InternalScenarioParser(TokenStream input, ScenarioGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Scenario";	
   	}
   	
   	@Override
   	protected ScenarioGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleScenario
entryRuleScenario returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScenarioRule()); }
	 iv_ruleScenario=ruleScenario 
	 { $current=$iv_ruleScenario.current; } 
	 EOF 
;

// Rule Scenario
ruleScenario returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Scenario' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScenarioAccess().getScenarioKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScenarioAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScenarioRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getScenarioAccess().getScheduleScheduleParserRuleCall_2_0()); 
	    }
		lv_schedule_2_0=ruleSchedule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScenarioRule());
	        }
       		set(
       			$current, 
       			"schedule",
        		lv_schedule_2_0, 
        		"Schedule");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	 iv_ruleComponent=ruleComponent 
	 { $current=$iv_ruleComponent.current; } 
	 EOF 
;

// Rule Component
ruleComponent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComponentAccess().getActivityParserRuleCall_0()); 
    }
    this_Activity_0=ruleActivity
    { 
        $current = $this_Activity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComponentAccess().getDivergenceParserRuleCall_1()); 
    }
    this_Divergence_1=ruleDivergence
    { 
        $current = $this_Divergence_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleSchedule
entryRuleSchedule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScheduleRule()); }
	 iv_ruleSchedule=ruleSchedule 
	 { $current=$iv_ruleSchedule.current; } 
	 EOF 
;

// Rule Schedule
ruleSchedule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScheduleAccess().getLeftSquareBracketKeyword_0());
    }
	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getScheduleAccess().getHyphenMinusKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScheduleAccess().getComponentsComponentParserRuleCall_2_0()); 
	    }
		lv_components_2_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScheduleRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_2_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='-' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScheduleAccess().getHyphenMinusKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScheduleAccess().getComponentsComponentParserRuleCall_3_1_0()); 
	    }
		lv_components_4_0=ruleComponent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScheduleRule());
	        }
       		add(
       			$current, 
       			"components",
        		lv_components_4_0, 
        		"Component");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getScheduleAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleActivity
entryRuleActivity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActivityRule()); }
	 iv_ruleActivity=ruleActivity 
	 { $current=$iv_ruleActivity.current; } 
	 EOF 
;

// Rule Activity
ruleActivity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActivityAccess().getActivityAction_0(),
            $current);
    }
)	otherlv_1='Act' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getActivityAccess().getActKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getActivityAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActivityRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActivityAccess().getScheduleScheduleParserRuleCall_3_0()); 
	    }
		lv_schedule_3_0=ruleSchedule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActivityRule());
	        }
       		set(
       			$current, 
       			"schedule",
        		lv_schedule_3_0, 
        		"Schedule");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleDivergence
entryRuleDivergence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDivergenceRule()); }
	 iv_ruleDivergence=ruleDivergence 
	 { $current=$iv_ruleDivergence.current; } 
	 EOF 
;

// Rule Divergence
ruleDivergence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Div' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDivergenceAccess().getDivKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivergenceAccess().getTypeDivergenceTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleDivergenceType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivergenceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"DivergenceType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDivergenceAccess().getLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivergenceAccess().getSchedulesScheduleParserRuleCall_3_0()); 
	    }
		lv_schedules_3_0=ruleSchedule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivergenceRule());
	        }
       		add(
       			$current, 
       			"schedules",
        		lv_schedules_3_0, 
        		"Schedule");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDivergenceAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDivergenceAccess().getSchedulesScheduleParserRuleCall_4_1_0()); 
	    }
		lv_schedules_5_0=ruleSchedule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDivergenceRule());
	        }
       		add(
       			$current, 
       			"schedules",
        		lv_schedules_5_0, 
        		"Schedule");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDivergenceAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Rule DivergenceType
ruleDivergenceType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Choice' 
	{
        $current = grammarAccess.getDivergenceTypeAccess().getChoiceEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDivergenceTypeAccess().getChoiceEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Parallel' 
	{
        $current = grammarAccess.getDivergenceTypeAccess().getParallelEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDivergenceTypeAccess().getParallelEnumLiteralDeclaration_1()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


