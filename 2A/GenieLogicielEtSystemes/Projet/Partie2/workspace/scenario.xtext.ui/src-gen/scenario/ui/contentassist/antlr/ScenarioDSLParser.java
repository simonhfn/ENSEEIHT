/*
 * generated by Xtext
 */
package scenario.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import scenario.services.ScenarioDSLGrammarAccess;

public class ScenarioDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private ScenarioDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected scenario.ui.contentassist.antlr.internal.InternalScenarioDSLParser createParser() {
		scenario.ui.contentassist.antlr.internal.InternalScenarioDSLParser result = new scenario.ui.contentassist.antlr.internal.InternalScenarioDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getComponentAccess().getAlternatives(), "rule__Component__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getDivergenceTypeAccess().getAlternatives(), "rule__DivergenceType__Alternatives");
					put(grammarAccess.getScenarioAccess().getGroup(), "rule__Scenario__Group__0");
					put(grammarAccess.getScheduleAccess().getGroup(), "rule__Schedule__Group__0");
					put(grammarAccess.getScheduleAccess().getGroup_3(), "rule__Schedule__Group_3__0");
					put(grammarAccess.getActivityAccess().getGroup(), "rule__Activity__Group__0");
					put(grammarAccess.getDivergenceAccess().getGroup(), "rule__Divergence__Group__0");
					put(grammarAccess.getDivergenceAccess().getGroup_4(), "rule__Divergence__Group_4__0");
					put(grammarAccess.getScenarioAccess().getNameAssignment_1(), "rule__Scenario__NameAssignment_1");
					put(grammarAccess.getScenarioAccess().getScheduleAssignment_2(), "rule__Scenario__ScheduleAssignment_2");
					put(grammarAccess.getScheduleAccess().getComponentsAssignment_2(), "rule__Schedule__ComponentsAssignment_2");
					put(grammarAccess.getScheduleAccess().getComponentsAssignment_3_1(), "rule__Schedule__ComponentsAssignment_3_1");
					put(grammarAccess.getActivityAccess().getNameAssignment_2(), "rule__Activity__NameAssignment_2");
					put(grammarAccess.getActivityAccess().getScheduleAssignment_3(), "rule__Activity__ScheduleAssignment_3");
					put(grammarAccess.getDivergenceAccess().getTypeAssignment_1(), "rule__Divergence__TypeAssignment_1");
					put(grammarAccess.getDivergenceAccess().getSchedulesAssignment_3(), "rule__Divergence__SchedulesAssignment_3");
					put(grammarAccess.getDivergenceAccess().getSchedulesAssignment_4_1(), "rule__Divergence__SchedulesAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			scenario.ui.contentassist.antlr.internal.InternalScenarioDSLParser typedParser = (scenario.ui.contentassist.antlr.internal.InternalScenarioDSLParser) parser;
			typedParser.entryRuleScenario();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ScenarioDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ScenarioDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
