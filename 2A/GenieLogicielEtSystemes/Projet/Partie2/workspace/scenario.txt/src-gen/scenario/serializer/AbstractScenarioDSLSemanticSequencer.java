/*
 * generated by Xtext
 */
package scenario.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import scenario.Activity;
import scenario.Divergence;
import scenario.Scenario;
import scenario.ScenarioPackage;
import scenario.Schedule;
import scenario.services.ScenarioDSLGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractScenarioDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ScenarioDSLGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == ScenarioPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case ScenarioPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case ScenarioPackage.DIVERGENCE:
				sequence_Divergence(context, (Divergence) semanticObject); 
				return; 
			case ScenarioPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case ScenarioPackage.SCHEDULE:
				sequence_Schedule(context, (Schedule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (name=EString next=[Component|EString]? schedule=Schedule?)
	 */
	protected void sequence_Activity(EObject context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (type=DivergenceType next=[Component|EString]? schedules+=Schedule schedules+=Schedule*)
	 */
	protected void sequence_Divergence(EObject context, Divergence semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=EString schedule=Schedule)
	 */
	protected void sequence_Scenario(EObject context, Scenario semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, ScenarioPackage.Literals.SCENARIO__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScenarioPackage.Literals.SCENARIO__NAME));
			if(transientValues.isValueTransient(semanticObject, ScenarioPackage.Literals.SCENARIO__SCHEDULE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ScenarioPackage.Literals.SCENARIO__SCHEDULE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getScenarioAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getScenarioAccess().getScheduleScheduleParserRuleCall_2_0(), semanticObject.getSchedule());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (components+=Component components+=Component*)
	 */
	protected void sequence_Schedule(EObject context, Schedule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
