/*
 * generated by Xtext
 */
package scenario.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ScenarioDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScenarioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cScheduleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScheduleScheduleParserRuleCall_2_0 = (RuleCall)cScheduleAssignment_2.eContents().get(0);
		
		//Scenario:
		//	"Scenario" name=EString schedule=Schedule;
		@Override public ParserRule getRule() { return rule; }

		//"Scenario" name=EString schedule=Schedule
		public Group getGroup() { return cGroup; }

		//"Scenario"
		public Keyword getScenarioKeyword_0() { return cScenarioKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//schedule=Schedule
		public Assignment getScheduleAssignment_2() { return cScheduleAssignment_2; }

		//Schedule
		public RuleCall getScheduleScheduleParserRuleCall_2_0() { return cScheduleScheduleParserRuleCall_2_0; }
	}

	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Component");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cActivityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDivergenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Component:
		//	Activity | Divergence;
		@Override public ParserRule getRule() { return rule; }

		//Activity | Divergence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Activity
		public RuleCall getActivityParserRuleCall_0() { return cActivityParserRuleCall_0; }

		//Divergence
		public RuleCall getDivergenceParserRuleCall_1() { return cDivergenceParserRuleCall_1; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScheduleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cComponentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cComponentsComponentParserRuleCall_3_0 = (RuleCall)cComponentsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cComponentsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cComponentsComponentParserRuleCall_4_1_0 = (RuleCall)cComponentsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Schedule:
		//	"Schedule" "[" "-" components+=Component ("-" components+=Component)* "]";
		@Override public ParserRule getRule() { return rule; }

		//"Schedule" "[" "-" components+=Component ("-" components+=Component)* "]"
		public Group getGroup() { return cGroup; }

		//"Schedule"
		public Keyword getScheduleKeyword_0() { return cScheduleKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//components+=Component
		public Assignment getComponentsAssignment_3() { return cComponentsAssignment_3; }

		//Component
		public RuleCall getComponentsComponentParserRuleCall_3_0() { return cComponentsComponentParserRuleCall_3_0; }

		//("-" components+=Component)*
		public Group getGroup_4() { return cGroup_4; }

		//"-"
		public Keyword getHyphenMinusKeyword_4_0() { return cHyphenMinusKeyword_4_0; }

		//components+=Component
		public Assignment getComponentsAssignment_4_1() { return cComponentsAssignment_4_1; }

		//Component
		public RuleCall getComponentsComponentParserRuleCall_4_1_0() { return cComponentsComponentParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNextComponentCrossReference_3_1_0 = (CrossReference)cNextAssignment_3_1.eContents().get(0);
		private final RuleCall cNextComponentEStringParserRuleCall_3_1_0_1 = (RuleCall)cNextComponentCrossReference_3_1_0.eContents().get(1);
		private final Assignment cScheduleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cScheduleScheduleParserRuleCall_4_0 = (RuleCall)cScheduleAssignment_4.eContents().get(0);
		
		//Activity:
		//	{Activity} "Act" name=EString ("->" next=[Component|EString])? schedule=Schedule?;
		@Override public ParserRule getRule() { return rule; }

		//{Activity} "Act" name=EString ("->" next=[Component|EString])? schedule=Schedule?
		public Group getGroup() { return cGroup; }

		//{Activity}
		public Action getActivityAction_0() { return cActivityAction_0; }

		//"Act"
		public Keyword getActKeyword_1() { return cActKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//("->" next=[Component|EString])?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//next=[Component|EString]
		public Assignment getNextAssignment_3_1() { return cNextAssignment_3_1; }

		//[Component|EString]
		public CrossReference getNextComponentCrossReference_3_1_0() { return cNextComponentCrossReference_3_1_0; }

		//EString
		public RuleCall getNextComponentEStringParserRuleCall_3_1_0_1() { return cNextComponentEStringParserRuleCall_3_1_0_1; }

		//schedule=Schedule?
		public Assignment getScheduleAssignment_4() { return cScheduleAssignment_4; }

		//Schedule
		public RuleCall getScheduleScheduleParserRuleCall_4_0() { return cScheduleScheduleParserRuleCall_4_0; }
	}

	public class DivergenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Divergence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDivergenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDivKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDivergenceTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNextAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cNextComponentCrossReference_3_1_0 = (CrossReference)cNextAssignment_3_1.eContents().get(0);
		private final RuleCall cNextComponentEStringParserRuleCall_3_1_0_1 = (RuleCall)cNextComponentCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSchedulesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSchedulesScheduleParserRuleCall_6_0 = (RuleCall)cSchedulesAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cHyphenMinusKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cSchedulesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cSchedulesScheduleParserRuleCall_7_1_0 = (RuleCall)cSchedulesAssignment_7_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Divergence:
		//	{Divergence} "Div" type=DivergenceType ("->" next=[Component|EString])? "[" "-" schedules+=Schedule ("-"
		//	schedules+=Schedule)* "]";
		@Override public ParserRule getRule() { return rule; }

		//{Divergence} "Div" type=DivergenceType ("->" next=[Component|EString])? "[" "-" schedules+=Schedule ("-"
		//schedules+=Schedule)* "]"
		public Group getGroup() { return cGroup; }

		//{Divergence}
		public Action getDivergenceAction_0() { return cDivergenceAction_0; }

		//"Div"
		public Keyword getDivKeyword_1() { return cDivKeyword_1; }

		//type=DivergenceType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//DivergenceType
		public RuleCall getTypeDivergenceTypeEnumRuleCall_2_0() { return cTypeDivergenceTypeEnumRuleCall_2_0; }

		//("->" next=[Component|EString])?
		public Group getGroup_3() { return cGroup_3; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_0() { return cHyphenMinusGreaterThanSignKeyword_3_0; }

		//next=[Component|EString]
		public Assignment getNextAssignment_3_1() { return cNextAssignment_3_1; }

		//[Component|EString]
		public CrossReference getNextComponentCrossReference_3_1_0() { return cNextComponentCrossReference_3_1_0; }

		//EString
		public RuleCall getNextComponentEStringParserRuleCall_3_1_0_1() { return cNextComponentEStringParserRuleCall_3_1_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4() { return cLeftSquareBracketKeyword_4; }

		//"-"
		public Keyword getHyphenMinusKeyword_5() { return cHyphenMinusKeyword_5; }

		//schedules+=Schedule
		public Assignment getSchedulesAssignment_6() { return cSchedulesAssignment_6; }

		//Schedule
		public RuleCall getSchedulesScheduleParserRuleCall_6_0() { return cSchedulesScheduleParserRuleCall_6_0; }

		//("-" schedules+=Schedule)*
		public Group getGroup_7() { return cGroup_7; }

		//"-"
		public Keyword getHyphenMinusKeyword_7_0() { return cHyphenMinusKeyword_7_0; }

		//schedules+=Schedule
		public Assignment getSchedulesAssignment_7_1() { return cSchedulesAssignment_7_1; }

		//Schedule
		public RuleCall getSchedulesScheduleParserRuleCall_7_1_0() { return cSchedulesScheduleParserRuleCall_7_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_8() { return cRightSquareBracketKeyword_8; }
	}
	
	
	public class DivergenceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DivergenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChoiceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChoiceChoiceKeyword_0_0 = (Keyword)cChoiceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cParallelEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cParallelParallelKeyword_1_0 = (Keyword)cParallelEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DivergenceType:
		//	Choice | Parallel;
		public EnumRule getRule() { return rule; }

		//Choice | Parallel
		public Alternatives getAlternatives() { return cAlternatives; }

		//Choice
		public EnumLiteralDeclaration getChoiceEnumLiteralDeclaration_0() { return cChoiceEnumLiteralDeclaration_0; }

		//"Choice"
		public Keyword getChoiceChoiceKeyword_0_0() { return cChoiceChoiceKeyword_0_0; }

		//Parallel
		public EnumLiteralDeclaration getParallelEnumLiteralDeclaration_1() { return cParallelEnumLiteralDeclaration_1; }

		//"Parallel"
		public Keyword getParallelParallelKeyword_1_0() { return cParallelParallelKeyword_1_0; }
	}
	
	private final ScenarioElements pScenario;
	private final ComponentElements pComponent;
	private final EStringElements pEString;
	private final ScheduleElements pSchedule;
	private final ActivityElements pActivity;
	private final DivergenceElements pDivergence;
	private final DivergenceTypeElements unknownRuleDivergenceType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ScenarioDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScenario = new ScenarioElements();
		this.pComponent = new ComponentElements();
		this.pEString = new EStringElements();
		this.pSchedule = new ScheduleElements();
		this.pActivity = new ActivityElements();
		this.pDivergence = new DivergenceElements();
		this.unknownRuleDivergenceType = new DivergenceTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("scenario.ScenarioDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Scenario:
	//	"Scenario" name=EString schedule=Schedule;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//Component:
	//	Activity | Divergence;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Schedule:
	//	"Schedule" "[" "-" components+=Component ("-" components+=Component)* "]";
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}

	//Activity:
	//	{Activity} "Act" name=EString ("->" next=[Component|EString])? schedule=Schedule?;
	public ActivityElements getActivityAccess() {
		return pActivity;
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}

	//Divergence:
	//	{Divergence} "Div" type=DivergenceType ("->" next=[Component|EString])? "[" "-" schedules+=Schedule ("-"
	//	schedules+=Schedule)* "]";
	public DivergenceElements getDivergenceAccess() {
		return pDivergence;
	}
	
	public ParserRule getDivergenceRule() {
		return getDivergenceAccess().getRule();
	}

	//enum DivergenceType:
	//	Choice | Parallel;
	public DivergenceTypeElements getDivergenceTypeAccess() {
		return unknownRuleDivergenceType;
	}
	
	public EnumRule getDivergenceTypeRule() {
		return getDivergenceTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
