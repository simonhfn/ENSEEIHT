import ecore : 'http://www.eclipse.org/emf/2002/Ecore' ;

package simplepdl : simplepdl = 'http://simplepdl'
{
    enum WorkSequenceType { serializable }
    {
        literal startToStart;
        literal finishToStart = 1;
        literal startToFinish = 2;
        literal finishToFinish = 3;
    }
    class Process
    {
        attribute name : String[1];
        property processElements : ProcessElement[*] { ordered composes };
        invariant nameForbidden: name <> 'Process';
        invariant differentNames: 
            self.processElements->select(p | p.oclIsTypeOf(WorkDefinition))->collect(p | p.oclAsType(WorkDefinition))
            ->forAll(wd1, wd2 | wd1 <> wd2 implies wd1.name <> wd2.name);
    }
    abstract class ProcessElement
    {
        property process : Process[1] { derived readonly transient volatile !resolve }
        {
            initial: Process.allInstances()
                    ->select(p | p.processElements->includes(self))
                    ->asSequence()->first();
        }
    }
    class WorkDefinition extends ProcessElement
    {
        property linksToPredecessors#successor : WorkSequence[*] { ordered };
        property linksToSuccessors#predecessor : WorkSequence[*] { ordered };
        attribute name : String[1];
        property allocations#workDefinition : Allocation[*] { ordered composes };
        invariant notEmptyName: self.name <> '';
    }
    class WorkSequence extends ProcessElement
    {
        attribute linkType : WorkSequenceType[1];
        property predecessor#linksToSuccessors : WorkDefinition[1];
        property successor#linksToPredecessors : WorkDefinition[1];
        invariant previousWDinSameProcess: self.process = self.predecessor.process;
        invariant nextWDinSameProcess: self.process = self.successor.process;
        invariant nonReflexive: 
            self.successor <> self.predecessor;
    }
    class Guidance extends ProcessElement
    {
        property processElements : ProcessElement[*] { ordered };
        attribute text : String[1];
    }
    class Ressource extends ProcessElement
    {
        attribute count : ecore::EInt[1] = '1';
        attribute name : String[1] = '';
        property allocations#ressource : Allocation[*] { ordered };
    }
    class Allocation
    {
        property workDefinition#allocations : WorkDefinition[1];
        property ressource#allocations : Ressource[1];
        attribute count : ecore::EInt[1] = '1';
    }
}


